

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jezreel
 */
public class CryptoVault extends javax.swing.JFrame{
 String [] morse = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", 
        ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.","-----"};
        String [] charAc  = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"}; 
        int selectedIndex = 0;
        
        CaesarShift caesarshift;
        VigenereCipher vig;
        ZigZag zz;
        
        
    /**
     * Creates new form CryptoVault
     */
    public CryptoVault() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inPut = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outPut = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Encrypt = new javax.swing.JButton();
        Decode = new javax.swing.JButton();
        ciphers = new javax.swing.JComboBox<>();
        clear = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        inStruc = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 255));

        jPanel1.setBackground(new java.awt.Color(51, 255, 255));

        inPut.setColumns(20);
        inPut.setRows(5);
        jScrollPane1.setViewportView(inPut);

        outPut.setColumns(20);
        outPut.setRows(5);
        jScrollPane2.setViewportView(outPut);

        jLabel1.setText("Input your message here:");

        jLabel2.setText("Output");

        Encrypt.setText("Encrypt");
        Encrypt.setToolTipText("Encrypts your message");
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });

        Decode.setText("Decrypt");
        Decode.setToolTipText("Decrypts your message");
        Decode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeActionPerformed(evt);
            }
        });

        ciphers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Morse Code", "Caesar Cipher", "Vignere Cipher", "ZigZag Cipher", "None" }));
        ciphers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ciphersItemStateChanged(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        inStruc.setEditable(false);
        inStruc.setColumns(20);
        inStruc.setRows(5);
        inStruc.setText("Use a period and a dash to represent\nyour morse code when decrypting.");
        jScrollPane3.setViewportView(inStruc);

        jLabel3.setText("Instructions");

        key.setBackground(new java.awt.Color(240, 240, 240));
        key.setVisible(false);

        jLabel4.setVisible(false);
        jLabel4.setText("Key");

        jLabel5.setFont(new java.awt.Font("PMingLiU", 1, 14)); // NOI18N
        jLabel5.setText("CryptoVault");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addComponent(clear))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ciphers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3)
                                        .addComponent(key))
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(88, 88, 88)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(Encrypt)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Decode))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clear)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(ciphers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(2, 2, 2)
                                .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                        .addComponent(Encrypt)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(Decode)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)))))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeActionPerformed
        // TODO add your handling code here:
        if(selectedIndex==0){
        String dec = inPut.getText();
        String [] dec_array = dec.split(" ");
        String output1 = "";
        for(int l = 0; l<dec_array.length; l++)
        {
            for(int p = 0; p<morse.length; p++)
            {
                if(dec_array[l].equals(morse[p]))
                {
                    output1 += charAc[p] + " " ;
                }
            }
        }
        outPut.setText(output1);
        }
        else if(selectedIndex ==1){
            caesarshift = new CaesarShift();
            char keyIn = key.getText().charAt(0);
            keyIn = Character.toUpperCase(keyIn);
            String outPut1 = caesarshift.caesarCiphDe(inPut.getText().toUpperCase(), keyIn);
            outPut.setText(outPut1);
        }
        else if(selectedIndex == 2){
            vig = new VigenereCipher();
            String outPut1 = vig.decrypt(inPut.getText().toUpperCase(), key.getText().toUpperCase());
            outPut.setText(outPut1);
        }
        else if(selectedIndex == 3){
            zz =  new ZigZag();
            int keyIn = Integer.parseInt(key.getText());
            outPut.setText(zz.ZigZagDe(keyIn, inPut.getText()));
        }
      
        
    }//GEN-LAST:event_DecodeActionPerformed

    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptActionPerformed
        // TODO add your handling code here:
        if(selectedIndex==0){
        
        String en = inPut.getText();
        en = en.toUpperCase();
        String output = "";
        for(int x =0; x<en.length(); x++)
        {
            char c = en.charAt(x);
            String convertMor = Character.toString(c);
            for(int j=0; j<charAc.length; j++)
            {
                if(convertMor.equals(charAc[j]))
                {
                    output += morse[j] + " ";
                }
            }
        }
       outPut.setText(output);
        }
        else if(selectedIndex == 1){
            caesarshift = new CaesarShift();
            char keyIn = key.getText().charAt(0);
            keyIn = Character.toUpperCase(keyIn);
            String outPut1 = caesarshift.caesarCiphEn(inPut.getText().toUpperCase(), keyIn);
            outPut.setText(outPut1);
        }
        else if(selectedIndex == 2){
            vig = new VigenereCipher();
            String outPut1 = vig.encrypt(inPut.getText().toUpperCase(), key.getText().toUpperCase());
            outPut.setText(outPut1);
        }
        else if(selectedIndex == 3)
        {
            zz =  new ZigZag();
            int keyIn = Integer.parseInt(key.getText());
            outPut.setText(zz.ZigZagEn(keyIn, inPut.getText()));
        }
    }//GEN-LAST:event_EncryptActionPerformed

    private void ciphersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ciphersItemStateChanged
        // TODO add your handling code here:
        selectedIndex = ciphers.getSelectedIndex();
        
        if(selectedIndex == 0){
            inStruc.setText("Use a period and a dash to represent \nyour morse code when decrypting.");
            key.setVisible(false);
            jLabel4.setVisible(false);
        }
        
        else if (selectedIndex == 1){
            key.setVisible(true);
            jLabel4.setVisible(true);
            inStruc.setText("Enter one letter for a key.");
        }
        else if(selectedIndex == 2){
            key.setVisible(true);
            jLabel4.setVisible(true);
            inStruc.setText("Enter a phrase for a key.");
        }
        else if(selectedIndex == 3){
            key.setVisible(true);
            jLabel4.setVisible(true);
            inStruc.setText("Enter the number of rows for your \nZigZag encryption.");
        }
        else if(selectedIndex == 4){
            key.setVisible(false);
            jLabel4.setVisible(false);
            inStruc.setText("");
        }
        
        
    }//GEN-LAST:event_ciphersItemStateChanged

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        outPut.setText("");
        key.setText("");
    }//GEN-LAST:event_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CryptoVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CryptoVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CryptoVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CryptoVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptoVault().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Decode;
    private javax.swing.JButton Encrypt;
    private javax.swing.JComboBox<String> ciphers;
    private javax.swing.JButton clear;
    private javax.swing.JTextArea inPut;
    private javax.swing.JTextArea inStruc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField key;
    private javax.swing.JTextArea outPut;
    // End of variables declaration//GEN-END:variables
}
